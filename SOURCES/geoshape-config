#!/bin/bash
#Need to add usage
if [ "$EUID" -ne 0 ]
  then echo "geoshape-config requires root user access"
  exit
fi

usage ()
{
  echo 'Usage:'
  echo '        geoshape-config database'
  echo '        geoshape-config init'
  echo '        geoshape-config selinux'
  echo '        geoshape-config updateip <public ip or domain>'
  echo '        geoshape-config updatelayers'
  echo '        geoshape-config rebuild_index'
  echo '        geoshape-config syncdb'
  echo '        geoshape-config collectstatic'
  echo '        geoshape-config changepassword <username>'
  echo '        geoshape-config createsuperuser'
  echo '        geoshape-config shell'
  echo '        geoshape-config dbshell'
  echo '        geoshape-config start_all'
  echo '        Details: restarts all GeoSHAPE services'
  echo '        geoshape-config stop_all'
  echo '        Details: stops all GeoSHAPE services'
  echo '        geoshape-config init <ip or domain>'
  echo '        Details: chains together database, django, updateip,'
  echo '        collectstatic, syncdb, selinux, start_all,'
  echo '        updatelayers, rebuildindex and createsuperuser'
  exit
}

# global values
OPTIONS="$#"
VAR="$2"
CHAR="[:alnum:]"
IS_REPLACE=0
GEOSHAPE_ETC=/etc/geoshape
GEOSERVER_DATA_DIR=/var/lib/geoserver_data
CATALINA_ETC=/etc/tomcat/Catalina
PYTHON27=/var/lib/geonode/bin/python2.7
MANAGE=/var/lib/geonode/rogue_geonode/manage.py

database()
{
  if [ ! -d /var/lib/pgsql/9.3/data/base ]; then
    service postgresql-9.3 initdb
    chkconfig postgresql-9.3 on
    sed -i.geoshape "s/  peer/  trust/g" /var/lib/pgsql/9.3/data/pg_hba.conf
    sed -i.geoshape "s/  ident/  md5/g" /var/lib/pgsql/9.3/data/pg_hba.conf
    service postgresql-9.3 restart
  fi
  PGUSER=$(psql -U postgres -c '\du' | cut -d \| -f 1 | grep -w geoshape | wc -l)
  if [ $PGUSER == 0 ]
  then
    psqlpass=$(cat /dev/urandom | tr -cd "$CHAR" | head -c ${1:-16})
    sed -i "s@\(DATABASE_PASSWORD[  ]*=[  ]*\).*@\1\'$psqlpass'@g" $GEOSHAPE_ETC/local_settings.py
    psql -U postgres -c "CREATE USER geoshape WITH PASSWORD '$psqlpass';"
  else
    echo "geoshape user already created"
    echo "you may need to manually set the django setting in local_settings.py"
  fi
  GEOSHAPE_DB=$(psql -U postgres -lqt | cut -d \| -f 1 | grep -w geoshape | wc -l)
  if [ $GEOSHAPE_DB == 0 ]
  then
    psql -U postgres -c "CREATE DATABASE geoshape OWNER geoshape;"
  else
    echo "geoshape database already created"
  fi
  GEOSHAPE_DATA_DB=$(psql -U postgres -lqt | cut -d \| -f 1 | grep -w geoshape_data | wc -l)
  if [ $GEOSHAPE_DATA_DB == 0 ]
  then
    psql -U postgres -c "CREATE DATABASE geoshape_data OWNER geoshape;"
    psql -U postgres -d geoshape_data -c 'CREATE EXTENSION postgis;'
    psql -U postgres -d geoshape_data -c 'GRANT ALL ON geometry_columns TO PUBLIC;'
    psql -U postgres -d geoshape_data -c 'GRANT ALL ON spatial_ref_sys TO PUBLIC;'
  else
    echo "geoshape_data database already created"
  fi
}

django()
{
  secretkey=$(cat /dev/urandom | tr -cd "$CHAR" | head -c ${1:-32})
  sed -i "s@\(SECRET_KEY[  ]*=[  ]*\).*@\1\'$secretkey'@g" $GEOSHAPE_ETC/local_settings.py
}

selinux()
{
  iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
  service iptables save
  setsebool -P httpd_can_network_connect=1 httpd_can_network_connect_db=1
  service iptables restart
  service httpd restart
}

syncdb()
{
  $PYTHON27 $MANAGE syncdb --noinput
}

collectstatic()
{
  $PYTHON27 $MANAGE collectstatic --noinput
}

changepassword()
{
  USER="$VAR"
  $PYTHON27 $MANAGE changepassword $USER
}

createsuperuser()
{
  echo "Creating django/geoshape superuser"
  $PYTHON27 $MANAGE createsuperuser
}

updateip()
{
  NEWIP="$VAR"
  # Replace SITEURL in $GEOSHAPE_ETC/local_settings.py
  echo "Replacing SITEURL value with '$NEWIP' in $GEOSHAPE_ETC/local_settings.py ... " | tr -d '\n'
  sed -i "s@\(SITEURL[  ]*=[  ]*\).*@\1\'http://$NEWIP\/'@g" $GEOSHAPE_ETC/local_settings.py
  echo "done."

  echo "Adding entry for '$NEWIP' in $GEOSERVER_DATA_DIR/printing/config.yaml ... " | tr -d '\n'
  printing_config=$GEOSERVER_DATA_DIR/printing/config.yaml

  if grep -q "$NEWIP" "$printing_config"
  then
      echo "'$NEWIP' already found to the printing whitelist."
  else
      sed -i "s#hosts:#hosts:\n  - !ipMatch\n    ip: $NEWIP#g" $printing_config
      echo "done."
  fi

  # if ALLOWED_HOSTS already exists ...
  if grep -q "^[  ]*ALLOWED_HOSTS[  ]*=" "$GEOSHAPE_ETC/local_settings.py"
  then
      if [ $IS_REPLACE -eq 1 ]
      then
          echo "Replacing ALLOWED_HOSTS in $GEOSHAPE_ETC/local_settings.py ... " | tr -d '\n'
          sed -i "s/^\([  ]*ALLOWED_HOSTS[  ]*=\).*/\1 [ 'localhost', '$NEWIP', ]/g" "$GEOSHAPE_ETC/local_settings.py"
          echo "done."
      else
          echo "Adding $NEWIP to ALLOWED_HOSTS in $GEOSHAPE_ETC/local_settings.py ... " | tr -d '\n'
          items="$(grep "^[   ]*ALLOWED_HOSTS[  ]*=" "$GEOSHAPE_ETC/local_settings.py" | \
                   sed 's/^[  ]*ALLOWED_HOSTS[  ]*=[  ]*\[//g;s/\][   ]*$//g')"
          already_found=0
          oldifs="$IFS"
          IFS=','
          for item in $items
          do
              item_cls="$(echo "$item" | sed "s/^[  ]*['\"]//g;s/['\"][   ]*$//g")"
              if [ "$item_cls" = "$NEWIP" ]
              then
                  already_found=1
                  break
              fi
          done
          IFS="$oldifs"
          if [ $already_found -eq 0 ]
          then
              if echo "$items" | grep -q ',[  ]*$'
              then
                  items="${items}'$NEWIP', "
              else
                  items="${items}, '$NEWIP', "
              fi
              sed -i "s/^\([  ]*ALLOWED_HOSTS[  ]*=\).*/\1 [ $items ]/g" "$GEOSHAPE_ETC/local_settings.py"
              echo "done."
          else
              echo "'$NEWIP' already found in ALLOWED_HOSTS list."
          fi
      fi
  else
      echo "Adding ALLOWED_HOSTS with in $GEOSHAPE_ETC/local_settings.py ... " | tr -d '\n'
      echo "ALLOWED_HOSTS=['localhost', '$NEWIP', ]" >> $GEOSHAPE_ETC/local_settings.py
      echo "done."
  fi
  echo "Restarting Apache HTTPD"
  service httpd restart
}

updatelayers()
{
  $PYTHON27 $MANAGE updatelayers -ignore-errors --remove-deleted --skip-unadvertised
}

rebuild_index()
{
  $PYTHON27 $MANAGE rebuild_index --noinput
}

shell()
{
  $PYTHON27 $MANAGE shell
}

dbshell()
{
  $PYTHON27 $MANAGE dbshell
}

start_all()
{
  chkconfig tomcat on
  echo "Restarting tomcat service"
  service tomcat restart
  chkconfig rabbitmq-server on
  echo "Restarting rabbitmq-server service"
  service rabbitmq-server restart
  chkconfig elasticsearch on
  echo "Restarting elasticsearch service"
  service elasticsearch restart
  chkconfig geoshape on
  echo "Restarting geoshape service"
  service geoshape restart
  chkconfig httpd on
  echo "Restarting httpd service"
  service httpd restart
}

stop_all()
{
  echo "Stopping tomcat service"
  service tomcat stop
  echo "Stopping rabbitmq-server service"
  service rabbitmq-server stop
  echo "Stopping elasticsearch service"
  service elasticsearch stop
  echo "Stopping geoshape service"
  service geoshape stop
  echo "Stopping httpd service"
  service httpd stop
}

case "$1" in
    init)
        if [ $OPTIONS -eq 2 ];
        then
          database
          django
          updateip
          collectstatic
          syncdb
          selinux
          start_all
          echo "Waiting 90 seconds for services to start up"
          sleep 90
          updatelayers
          rebuild_index
          createsuperuser
        else
          echo "Usage: geoshape-config $1 <public domain or ip address>"
        fi
        RETVAL=$?
        ;;
    database)
        database
        RETVAL=$?
        ;;
    django)
        django
        RETVAL=$?
        ;;
    selinux)
        selinux
        RETVAL=$?
        ;;
    updateip)
        if [ $OPTIONS -eq 2 ];
        then
          updateip
        else
          echo "Usage: geoshape-config $1 <public domain or ip address>"
        fi
        RETVAL=$?
        ;;
    updatelayers)
        updatelayers
        RETVAL=$?
        ;;
    rebuild_index)
        rebuild_index
        RETVAL=$?
        ;;
    syncdb)
        syncdb
        RETVAL=$?
        ;;
    collectstatic)
        collectstatic
        RETVAL=$?
        ;;
    changepassword)
        if [ $OPTIONS -eq 2 ];
        then
          changepassword
        else
          echo "Usage: geoshape-config $1 <username>"
        fi
        RETVAL=$?
        ;;
    createsuperuser)
        createsuperuser
        RETVAL=$?
        ;;
    shell)
        shell
        RETVAL=$?
        ;;
    dbshell)
        dbshell
        RETVAL=$?
        ;;
    start_all)
        start_all
        RETVAL=$?
        ;;
    stop_all)
        stop_all
        RETVAL=$?
        ;;
    *)
        usage
        exit 1
esac
